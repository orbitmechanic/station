{"version":3,"sources":["components/ribbon.jsx","components/stage.jsx","components/kickplate.jsx","App.js","serviceWorker.js","index.js"],"names":["ribbon","Navbar","bg","variant","Brand","href","alt","src","height","width","className","DropdownButton","alignRight","title","id","Dropdown","Item","eventKey","Component","Stage","Container","fluid","Button","kickplate","Jumbotron","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kSAKqBA,E,uKAEb,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACtB,kBAACF,EAAA,EAAOG,MAAR,CACAC,KAAK,SACD,yBACAC,IAAI,SACJC,IAAI,aACJC,OAAO,KAAKC,MAAM,KAClBC,UAAU,SANd,2BAUA,kBAACC,EAAA,EAAD,CAAgBC,YAAU,EAC1BC,MAAM,OACNC,GAAG,6BACH,kBAACC,EAAA,EAASC,KAAV,CAAeC,SAAS,KAAxB,YACA,kBAACF,EAAA,EAASC,KAAV,CAAeC,SAAS,KAAxB,eACA,kBAACF,EAAA,EAASC,KAAV,CAAeC,SAAS,KAAxB,iBACA,kBAACF,EAAA,EAASC,KAAV,CAAeC,SAAS,KAAxB,eACA,kBAACF,EAAA,EAASC,KAAV,CAAeC,SAAS,KAAxB,wB,GArBoBC,a,gBCarBC,EAff,uKAEQ,OACI,kBAACC,EAAA,EAAD,CAAWN,GAAG,YAAYO,OAAK,GAC3B,kBAACD,EAAA,EAAD,CAAWV,UAAU,eAAeI,GAAG,WAAvC,OACA,kBAACM,EAAA,EAAD,CAAWV,UAAU,eAAeI,GAAG,WAAvC,OACA,kBAACQ,EAAA,EAAD,CAAQZ,UAAU,gBAAgBP,QAAQ,UAAcW,GAAG,WAA3D,KACA,kBAACQ,EAAA,EAAD,CAAQZ,UAAU,gBAAgBP,QAAQ,YAAcW,GAAG,WAA3D,KACA,kBAACQ,EAAA,EAAD,CAAQZ,UAAU,gBAAgBP,QAAQ,OAAcW,GAAG,WAA3D,KACA,kBAACQ,EAAA,EAAD,CAAQZ,UAAU,gBAAgBP,QAAQ,UAAcW,GAAG,WAA3D,UAThB,GAA2BI,a,QCANK,E,uKAEb,OACI,kBAACC,EAAA,EAAD,CAAWV,GAAG,YAAYO,OAAK,GAC3B,gE,GAJuBH,a,MCexBO,MAVf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6fb00dbd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport DropdownButton from 'react-bootstrap/DropdownButton'\r\n\r\nexport default class ribbon extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand \r\n                href=\"#home\">\r\n                    <img \r\n                    alt='<logo>'\r\n                    src='./logo.svg'\r\n                    height='30' width='30'\r\n                    className='logo'\r\n                    />\r\n                Orbital Investments LLC\r\n                </Navbar.Brand>\r\n                <DropdownButton alignRight\r\n                title=\"Mode\"\r\n                id=\"dropdown-menu-align-right\">\r\n                <Dropdown.Item eventKey=\"1\">0 Idling</Dropdown.Item>\r\n                <Dropdown.Item eventKey=\"2\">1 Personell</Dropdown.Item>\r\n                <Dropdown.Item eventKey=\"3\">2 Market Tool</Dropdown.Item>\r\n                <Dropdown.Item eventKey=\"4\">3 Cryptozoo</Dropdown.Item>\r\n                <Dropdown.Item eventKey=\"5\">4 Experimental</Dropdown.Item>\r\n                </DropdownButton>\r\n            </Navbar>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {Container, Button}from 'react-bootstrap';\r\n\r\nexport class Stage extends Component {\r\n    render() {\r\n        return (\r\n            <Container id='backplane' fluid>\r\n                <Container className='OutputScreen' id='Screen1'>One</Container>\r\n                <Container className='OutputScreen' id='Screen2'>Two</Container>\r\n                <Button className='ScreenControl' variant='primary'     id='Button1'>1</Button>\r\n                <Button className='ScreenControl' variant='secondary'   id='Button2'>2</Button>\r\n                <Button className='ScreenControl' variant='info'        id='Button3'>3</Button>\r\n                <Button className='ScreenControl' variant='success'     id='Button4'>4</Button>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Stage\r\n","import React, { Component } from 'react'\r\nimport {Jumbotron}from 'react-bootstrap';\r\n\r\nexport default class kickplate extends Component {\r\n    render() {\r\n        return (\r\n            <Jumbotron id='baseboard' fluid>\r\n                <p>orbitmechanic@protonmail.com</p>\r\n            </Jumbotron>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport Ribbon from './components/ribbon'\r\nimport Stage from './components/stage'\r\nimport Kickplate from './components/kickplate'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Ribbon />\r\n      <Stage/>  \r\n      <Kickplate/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}